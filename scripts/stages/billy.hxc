import flixel.FlxG;
import flixel.math.FlxAngle;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.cutscene.CutsceneType;
import funkin.graphics.FunkinSprite;
import funkin.play.Countdown;
import funkin.Conductor;
import flixel.FlxSprite;
import funkin.play.event.SongEvent;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import flixel.tweens.FlxEase;
import funkin.util.Constants;
import flixel.FlxCamera;
import Type;
import flixel.tweens.FlxTween;
import flixel.ui.FlxBar;
import openfl.filters.ShaderFilter;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import funkin.play.CharacterData.CutsceneType;
import Std;

class Billy extends Stage //This is indeed a stage script, I couldn't get the song script to work because I'm stupid.
{
	function new()
	{
		super('billy');
	}

	private var songEnded:Bool = false;

	var blue:ShaderFilter;
	var blueShader:FlxShader;
	var bgSprite:FunkinSprite;

	var startingFocusPointsBF = [];
	function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);
		bgSprite = new FunkinSprite(-100, -100);
		bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
		bgSprite.cameras = [PlayState.instance.camCutscene];
		//bgSprite.zIndex = 100;
		PlayState.instance.add(bgSprite);
		PlayState.instance.refresh();
		VideoCutscene.onVideoEnded.removeAll();
		/*blueShader = Paths.frag("blue");
		blueShader.data.hue.value = [1.3];
		blueShader.data.pix.value = [0.00001];
		blue = new ShaderFilter(blueShader);*/
		//camera.follow(PlayState.instance.cameraFollowPoint, null, 1);
	}

	function realvideopath(path):String
	{
		return "mods/hitsingle/videos/videos/" + path + ".mp4"; //for some reason `Path.videos(path)` doesn't work with mods, so this is a simple workaround.
	}

	function onCreatePost():Void
	{
		//PlayState.instance.camGame.bgColor.alpha = 0; // Show behind camera.
		songEnded = false;
		getGirlfriend().alpha = 0;
		getGirlfriend().visible = false;
		startingFocusPointsBF = [getBoyfriend().cameraFocusPoint.x - 100,getBoyfriend().cameraFocusPoint.y,getDad().cameraFocusPoint.x,getDad().cameraFocusPoint.y];
		PlayState.instance.healthBar.visible = false;
		PlayState.instance.healthBarBG.visible = false;
		PlayState.instance.iconP1.visible = false;
		PlayState.instance.iconP2.visible = false;
		PlayState.instance.comboPopUps.visible = false; //don't show score stuff
		getNamedProp('mirror').useColorTransform = true;

		lyric = new FlxAtlasSprite(0, 0, Paths.animateAtlas("lyric", "shared"));
		lyric.showPivot = false;
		lyric.anim.addBySymbol('2RECOVER_SILLIEST_LYRICE_DONE', '2RECOVER_SILLIEST_LYRICE_DONE',0,0,24);
		lyric.anim.addBySymbol('story_of_yourtalebilly', 'story_of_yourtalebilly',0,0,24);
		lyric.antialiasing = true;
		lyric.visible = false;
		PlayState.instance.add(lyric);
		/*var opponentStrumline:FlxSprite = PlayState.instance.opponentStrumline;
		var dumbdumbpos = -1;
		if (opponentStrumline != null)
		{
			for (arrow in opponentStrumline.members)
			{
				dumbdumbpos += 1;
				arrow.camera = PlayState.instance.camGame;
				arrow.scrollFactor.set(0.9, 0.9);
				arrow.alpha = 0.6;
				arrow.scale.x *= 1.2;
				arrow.scale.y *= 1.2;
				arrow.x += 550 + (0 * dumbdumbpos);
				arrow.y -= 3000;
			}
		}*/

	}

	function onCountdownStart(event:CountdownScriptEvent):Void
	{
		super.onCountdownStart(event);
		event.cancel();
		PlayState.instance.isInCountdown = true;
		PlayState.instance.startingSong = false;
		Conductor.instance.update(0);
		PlayState.instance.startSong();
		onCreatePost();

		PlayState.instance.playerStrumline.camera = PlayState.instance.camHUD;
		PlayState.instance.opponentStrumline.camera = PlayState.instance.camHUD;
		PlayState.instance.playerStrumline.visible = false;
		PlayState.instance.opponentStrumline.visible = false;
		PlayState.instance.scoreText.visible = false;
		PlayState.instance.scoreText.cameras = [PlayState.instance.camHUD];
	}

	function onSongStart(event:ScriptEvent):Void
	{
		super.onSongStart(event);
		objectsToOppositeCam(); //to hud
		VideoCutscene.play(realvideopath('open'), CutsceneType.MIDSONG);
		VideoCutscene.onVideoEnded.add(function(){
			PlayState.instance.mayPauseGame = true;
			PlayState.instance.playerStrumline.visible = true;
			PlayState.instance.opponentStrumline.visible = true;
			PlayState.instance.scoreText.visible = true;
			VideoCutscene.onVideoEnded.removeAll();
		});
		bgSprite.visible = false;
		PlayState.instance.isInCutscene = false;
		PlayState.instance.mayPauseGame = false;
	}

	var lyric:FlxAnimate;
	var bars:FlxSprite;

	var bar:FlxSprite;
	var iconOpp:FlxSprite;
	var iconP:FlxSprite;
	var actualBar:FlxBar;
	var evilBar:FlxBar;

	var areObjectsOnCutsceneCam:Bool = true;
	function objectsToOppositeCam() {
		var tempObjects = [bar,bars,iconOpp,iconP,actualBar,evilBar,bgSprite];
		var cam;
		if (areObjectsOnCutsceneCam) 
			cam = PlayState.instance.camHUD;
		else 
			cam = PlayState.instance.camCutscene;
		for (i in 0...tempObjects.length)
		{
			tempObjects[i].camera = cam;
		}
		PlayState.instance.scoreText.camera = cam;
		PlayState.instance.playerStrumline.camera = cam;
		PlayState.instance.opponentStrumline.camera = cam;
		areObjectsOnCutsceneCam = !areObjectsOnCutsceneCam;
	}

	
	override function buildStage()
	{
		super.buildStage();

		var vig = new FunkinSprite().loadGraphic(Paths.image('vignette'));
		vig.cameras = [PlayState.instance.camHUD];
		PlayState.instance.add(vig);

		bars = new FunkinSprite().loadGraphic(Paths.image('bars'));
		bars.cameras = [PlayState.instance.camCutscene];
		PlayState.instance.add(bars);

		bar = new FlxSprite().loadGraphic(Paths.image("Bar/Silly_Healthbar"));
		bar.cameras = [PlayState.instance.camCutscene];
		bar.scale.set(0.5, 0.5);
		bar.updateHitbox();
		bar.screenCenter();
		bar.x -= 250;
		bar.y = (PlayState.instance.healthBarBG.y - (bar.height / 2)) - 25;
	
		actualBar = new FlxBar(0, 0, Type.resolveEnum('flixel.ui.FlxBar.FlxBarFillDirection.LEFT_TO_RIGHT'), 327.805, 28);
		actualBar.cameras = [PlayState.instance.camCutscene];
		actualBar.createGradientBar([0xFF000000, 0xFF000000], [0xFF1565C0, 0xFFFFFFFF], 1, 90);
		actualBar.updateBar();
		actualBar.setPosition(419, 614);
		PlayState.instance.add(actualBar);
		evilBar = new FlxBar(0, 0, Type.resolveEnum('flixel.ui.FlxBar.FlxBarFillDirection.RIGHT_TO_LEFT'), 330.805, 36);
		evilBar.cameras = [PlayState.instance.camCutscene];
		evilBar.createGradientBar([0xFF000000, 0xFF000000], [0xFF8A0101, 0xFF000000], 1, 90);
		evilBar.updateBar();
		evilBar.setPosition(405 - evilBar.width - 25, 613.8);
		evilBar.flipX = true;
		PlayState.instance.add(evilBar);
		PlayState.instance.add(bar);
	
		iconP = new FlxSprite().loadGraphic(Paths.image("Bar/icons/bficon"));
		iconP.loadGraphic(Paths.image("Bar/icons/bficon"), true, Math.floor(iconP.width / 2), Math.floor(iconP.height));
		iconP.animation.add('bf', [0, 1], 0, false, true);
		iconP.animation.play('bf');
		iconP.cameras = [PlayState.instance.camCutscene];
		iconP.setPosition(400, (bar.y + (bar.height / 2) - (iconP.height / 2)));
		iconP.flipX = true;
		PlayState.instance.add(iconP);
	
		iconOpp = new FlxSprite();
		iconOpp.loadGraphic(Paths.image("Bar/icons/billyicon"));
		iconOpp.loadGraphic(Paths.image("Bar/icons/billyicon"), true, Math.floor(iconOpp.width / 5), Math.floor(iconOpp.height));
		iconOpp.animation.add('0', [0], 0, false, false);
		iconOpp.animation.add('1', [1], 0, false, false);
		iconOpp.animation.add('2', [2], 0, false, false);
		iconOpp.animation.add('3', [3], 0, false, false);
		iconOpp.animation.add('4', [4], 0, false, false);
		iconOpp.animation.play('1');
		iconOpp.cameras = [PlayState.instance.camCutscene];
		iconOpp.setPosition(405 - iconOpp.width, (bar.y + (bar.height / 2) - (iconOpp.height / 2)));
		PlayState.instance.add(iconOpp);
	
		iconOpp.centerOffsets();
		iconP.centerOffsets();
	}

	function tweenCameraZoom(zoom, duration, isDirectMode, ease):Void
	{
		var durSeconds = Conductor.instance.stepLengthMs * duration / 1000;

        PlayState.instance.tweenCameraZoom(zoom, durSeconds, isDirectMode, ease);
	}

	var mustHitSection:Bool = false;

	public override function onSongEvent(scriptEvent:SongEventScriptEvent)
	{
		super.onSongEvent(scriptEvent);
		if (scriptEvent.eventData.eventKind == "FocusCamera")
		{
			var eventProps = scriptEvent.eventData.value;
			switch (Std.parseInt(eventProps.char)) {
				case 0:
					mustHitSection = true;
				case 1:
					mustHitSection = false;
				default:
			}
		}
	}

	function onUpdate(event:UpdateScriptEvent):Void
	{
		super.onUpdate(event);
		if (songEnded) return;
		if (PlayState.instance.healthBar != null && actualBar != null && evilBar != null) {
			actualBar.percent = PlayState.instance.healthBar.percent;
			evilBar.percent = 100 - PlayState.instance.healthBar.percent;
		}
	
		PlayState.instance.scoreText.x = 213.75 - (PlayState.instance.scoreText.width / 3);
	
		if (!mustHitSection)
			tweenCameraZoom(0.625, 3, true, FlxEase.linear);
		else
			tweenCameraZoom(0.5, 3, true, FlxEase.linear);

		if (iconP != null) {
			var percent = (PlayState.instance.health / 2) * 100;
			if (percent < 20){
				iconP.animation.curAnim.curFrame = 1;
			}
			else{
				iconP.animation.curAnim.curFrame = 0;
			}
		}
	}

	function fetchAssetPaths():Array<String>
	{
		var results:Array<String> = super.fetchAssetPaths();
		results.push(Paths.image('characters/Lookalike_Assets'));
		results.push(Paths.image('characters/Lookalike_Alt'));
		results.push(Paths.image('characters/unshrink'));
		results.push(Paths.image('bg/broken_mirror'));
		return results;
	}

	var objects = [];
	var prevIndex = 0;

	function changeDad(newChar:String) {
		getDad(true); //kills bro
		var dad:BaseCharacter = CharacterDataParser.fetchCharacter(newChar);
		dad.characterType = CharacterType.DAD;
		addCharacter(dad, CharacterType.DAD);
		refresh();
		dad.resetCharacter();
		startingFocusPointsBF[2] = getDad().cameraFocusPoint.x;
		startingFocusPointsBF[3] = getDad().cameraFocusPoint.y;
	}

	function onBeatHit(event:SongTimeScriptEvent):Void
	{
		super.onBeatHit(event);

		switch(event.beat) 
		{
			case 335: //transform
				mustHitSection = true;
				changeDad("transLookalike");
				getDad().playAnimation("Smallize");
			case 339: //short char
				iconOpp.animation.play('2');
				changeDad("bf-lookalike");
				getDad().x += 42;
				getDad().y -= 21;
				mustHitSection = true;
			case 488: //transform back
				iconOpp.animation.play('1');
				changeDad("transLookalike2");
				getDad().x += 228;
				getDad().y += 171;
				getDad().playAnimation("Bigize");
				mustHitSection = true;
			case 492: //tall char again
				changeDad("evilLookalike");
				mustHitSection = true;
			case 798: //fade shut if
				objects = [bar,iconOpp,iconP,actualBar,evilBar,PlayState.instance.scoreText];
				for (i in 0...objects.length)
				{
					FlxTween.tween(objects[i], {alpha: 0}, 1);
				}
				FlxTween.tween(PlayState.instance.playerStrumline, {alpha: 0}, 1);
				//FlxTween.tween(PlayState.instance.camHUD, {alpha: 0}, 1);
			case 802: //I'LL MAKEEEE
				getDad().visible = false;
				lyric.setPosition(getDad().x + 706, getDad().y + 473);
				lyric.visible = true;
				lyric.anim.play('story_of_yourtalebilly', false, false);
			case 812: //you sayy
				
			//case 820: //how proud you are
			case 820: //proud
				getNamedProp("mirror").loadGraphic(Paths.image('bg/broken_mirror'));
                FlxTween.num(255, 0, 1.75, {ease: FlxEase.quadOut, onUpdate: function(twn){ getNamedProp("mirror").setColorTransform(1,1,1,1,twn.value,twn.value,twn.value,0); } } );
                PlayState.instance.camGame.shake(0.01, 0.25);
                FlxG.sound.play(Paths.sound("mirror_break"));
			case 826: //of me
			case 830:
				bgSprite.visible = true;
				bgSprite.alpha = 0;
				FlxTween.tween(bgSprite, {alpha: 1}, 1);
			case 833: //CUTSCENE
				var playerStrumline:FlxSprite = PlayState.instance.playerStrumline;
				if (playerStrumline != null)
				{
					playerStrumline.x = FlxG.width / 2 - playerStrumline.width / 2;
					playerStrumline.alpha = 0;
				}
				PlayState.instance.opponentStrumline.visible = false;
				objectsToOppositeCam(); //to cutscenecam
				bars.zIndex = 1000;
				VideoCutscene.play(realvideopath('SO_STAY_FINAL'), CutsceneType.MIDSONG);
				VideoCutscene.onVideoEnded.add(function(){
					//shaders
					/*PlayState.instance.camGame.setFilters([new ShaderFilter(blue)]);
                    PlayState.instance.camHUD.setFilters([new ShaderFilter(blue)]);
					PlayState.instance.camCutscene.setFilters([new ShaderFilter(blue)]);*/
					objectsToOppositeCam(); //to hud
					PlayState.instance.mayPauseGame = true;
					bgSprite.alpha = 0;

					for (i in 0...objects.length)
					{
						objects[i].alpha = 0;
					}
					if (playerStrumline != null)
					{
						FlxTween.tween(PlayState.instance.playerStrumline, {x: PlayState.instance.playerStrumline.x * 1.7}, 1);
					}
					PlayState.instance.camHUD.alpha = 1;
					//bars.camera = PlayState.instance.camHUD;
					//bars.zIndex = prevIndex;
					//PlayState.instance.playerStrumline.camera = PlayState.instance.camHUD;
					PlayState.instance.camGame.flash(0xFF000000, 2);  
                    lyric.visible = false;
                    getDad().visible = true;
                    PlayState.instance.camGame.zoom = 1.1;
				});
				PlayState.instance.isInCutscene = false;
				PlayState.instance.mayPauseGame = false;
			case 864:
				FlxTween.tween(PlayState.instance.playerStrumline, {alpha: 1}, 1);
			case 996:
				bgSprite.alpha = 1;
			case 998: //fade strums out
				var playerStrumline:FlxSprite = PlayState.instance.playerStrumline;
				if (playerStrumline != null)
					FlxTween.tween(PlayState.instance.playerStrumline, {alpha: 0}, 3);
		}
	}

	function onSongRetry(event:ScriptEvent)
	{
		super.onSongRetry(event);
		onCreate();
	}

	override function onSongEnd(event:ScriptEvent):Void {
		if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
		songEnded = true;
		super.onSongEnd(event);
		objects = [bar,iconOpp,iconP,actualBar,evilBar];
		for (i in 0...objects.length)
		{
			objects[i].destroy();
			PlayState.instance.remove(objects[i]);
		}
		bgSprite.camera = PlayState.instance.camHUD;
		bars.camera = PlayState.instance.camHUD;
	}

	function onNoteIncoming(event:NoteScriptEvent):Void
	{
		/*if (event.note.noteData.getMustHitNote())
			return;
		event.note.x += 550;
		event.note.scrollFactor.set(0.9, 0.9);
		event.note.alpha = 0.6;
		event.note.scale.x *= 1.2;
		event.note.scale.y *= 1.2;*/
	}

	function onNoteHit(event:HitNoteScriptEvent):Void
	{
		if (!event.note.noteData.getMustHitNote()) PlayState.instance.vocals.volume = 1; PlayState.instance.vocals.playerVolume = 1; PlayState.instance.vocals.opponentVolume = 1;
		if (event.note.noteData.getMustHitNote()) {
			getBoyfriend().resetPosition();
			getBoyfriend().cameraFocusPoint.x = startingFocusPointsBF[0];
			getBoyfriend().cameraFocusPoint.y = startingFocusPointsBF[1];
			getBoyfriend().playSingAnimation(event.note.noteData.noteDirection);
		}
		if (!event.note.noteData.getMustHitNote()) {
			getDad().resetPosition();
			getDad().cameraFocusPoint.x = startingFocusPointsBF[2];
			getDad().cameraFocusPoint.y = startingFocusPointsBF[3];
			getDad().playSingAnimation(event.note.noteData.noteDirection);
		}
		if ((mustHitSection && event.note.noteData.getMustHitNote()) || (!mustHitSection && !event.note.noteData.getMustHitNote())) {
			var xoffsetbffix = 0;
			if (mustHitSection && event.note.noteData.getMustHitNote()) xoffsetbffix = -200;
			FlxG.camera.targetOffset.set(0,0);
			if (event.note.direction == 0) FlxG.camera.targetOffset.x = -30;
			if (event.note.direction == 1) FlxG.camera.targetOffset.y = 30;
			if (event.note.direction == 2) FlxG.camera.targetOffset.y = -30;
			if (event.note.direction == 3) FlxG.camera.targetOffset.x = 30;
		} 

		if (PlayState.instance.opponentStrumline == null || event.note.noteData.getMustHitNote())
			return;
		if(PlayState.instance.health >= 0.1)
			PlayState.instance.health -= Constants.HEALTH_SICK_BONUS * 0.5;
	}
}